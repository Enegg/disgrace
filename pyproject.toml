[project]
name = "disgrace"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Enegg", email = "42005170+Enegg@users.noreply.github.com" },
]
requires-python = ">=3.13"
dependencies = [
    "anyio>=4.9.0",
    "attrs>=25.3.0",
    "httpx>=0.28.1",
    "msgspec>=0.19.0",
    "typing-extensions>=4.13.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.ruff]
src = ["src"]
line-length = 90
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "FIX",
    "TD",      # todo, fixme
    "ANN401",  # use of Any
    "ARG",     # unused parameters
    "B005",    # I know str.strip(...) takes a set
    "BLE001",  # except Exception; reported in places where exceptions are gathered into a group
    "C901",    # complex functions oh no
    "COM812",  # don't require commas
    "D1",      # don't enforce docstrings for public API
    "FBT",     # positional bool params; using inlayHints
    "F821",    # undefined variables; => pyright
    "INP001",  # no __init__.py
    "N806",    # LET ME USE CONSTANTS IN FUNCTIONS
    "N818",    # naming exceptions as *Error
    "PD",      # not using pandas
    "PLR091",  # too many ...
    "PLW0603", # lifetime globals are ok
    "PIE796",  # non-unique enums (that's a job for @unique)
    "PYI041",  # int | float isn't redundant
    "PLC0105", # T_co / T_contra; don't care
    "PLC0414", # import foo as foo
    "RET503",  # "return xyz(...)" where "xyz(...) -> None" is ok
    "S101",    # asserts are very useful
    "S311",    # we don't do cryptography
    "SLF001",  # _member access; => pyright
    "T201",    # print
    "TC002",   # move under TYPE_CHECKING
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403"] # import *
"tests/*" = ["TC001"] # move under TYPE_CHECKING

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false
extra-standard-library = ["typing_extensions"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "discord",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "format", "input", "type"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = [
    "__attrs_pre_init__ ",
    "__attrs_post_init__",
    "__attrs_init__",
]


[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.13"

# disabled even in strict
deprecateTypingAliases = true
reportImplicitOverride = "warning"
reportImportCycles = true
reportUninitializedInstanceVariable = true
reportUnnecessaryTypeIgnoreComment = "warning"

# prefer "# pyright: ignore[ruleName]" over "# type: ignore"
enableTypeIgnoreComments = false

# downgrade a few common non-issues
reportUnusedImport = "warning"
reportMatchNotExhaustive = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryIsInstance = "information"
